plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.sonarqube'
    id 'dagger.hilt.android.plugin'
    id 'jacoco'
    id 'kotlin-kapt'
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.epfl.dedis.hbt"
        minSdk 28
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "com.epfl.dedis.hbt.test.HiltTestRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            testCoverageEnabled true
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        // https://developer.android.com/topic/libraries/view-binding
        viewBinding true
    }

    testOptions {
        unitTests {
            // Needed to have access to the R class in the unit tests (useful for Robolectric tests)
            includeAndroidResources = true
        }
    }

    sourceSets {
        // The project has an unconventional setup to be able to share the test-utility code between the unit test and the android tests.
        //
        // For some reason, android gradle does not provide any easy way to setup shared sources.
        // the current solution is to add everything in the debug build type. This means that the tests can only be run in the debug mode.
        //
        // To force the naming of the source folder to something more conventional, the test and
        // androidTest source set were replaced by testDebug and androidTestDebug.
        testDebug {
            java.srcDirs = test.java.srcDirs
            resources.srcDirs = test.resources.srcDirs
        }

        androidTestDebug {
            java.srcDirs = androidTest.java.srcDirs
            resources.srcDirs = androidTest.resources.srcDirs
        }

        // And the usual test and androidTest sources were removed
        test {
            java.srcDirs = []
            resources.srcDirs = []
        }

        androidTest {
            java.srcDirs = []
            resources.srcDirs = []
        }
    }
}

// Disable every task related to release unit tests
project.afterEvaluate {
    tasks.findAll {
        var task = it.name.toLowerCase()
        return task.contains("release") && task.contains("unit")
    }.forEach {
        it.enabled = false
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "hbt-android"
        property "sonar.projectName", "HBT - Android"
        property "sonar.organization", "dedis"
        property "sonar.host.url", "https://sonarcloud.io"
        // Comma-separated paths to the various directories containing the *.xml JUnit report files. Each path may be absolute or relative to the project base directory.
        property "sonar.junit.reportPaths", "${project.buildDir}/test-results/testDebugUnitTest/"
        // Paths to xml files with Android Lint issues. If the main flavor is changed, this file will have to be changed too.
        property "sonar.androidLint.reportPaths", "${project.buildDir}/reports/lint-results-debug.xml"
        // Paths to JaCoCo XML coverage report files.
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
        // Exclude debug sources from the coverage
        property "sonar.coverage.exclusions", "src/debug/**/*.*"
    }
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

// Jacoco reporting task
task jacocoTestReport(type: JacocoReport, dependsOn: ['check']) {
    reports {
        xml.required = true
        html.required = true
    }

    def fileFilter = [
        // Exclude Android generated classes
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'androidx/**/*.*',
        '**/databinding/*Binding.class',
        // Exclude Hilt generated classes
        '**/*Hilt*.*',
        'hilt_aggregated_deps/**',
        '**/*_Factory**',
        '**/*_MembersInjector.class',
        'dagger/**',
        '*_ComponentTreeDeps.class',
        // Exclude all the files of the test framework
        'com/epfl/dedis/hbt/test/**'
    ]
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/asm_instrumented_project_classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
        'outputs/unit_test_code_coverage/*/*.exec',
        'outputs/code_coverage/*/connected/**/*.ec',
    ]))
}

dependencies {
    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation 'androidx.annotation:annotation:1.4.0'
    implementation 'androidx.fragment:fragment-ktx:1.4.1'

    debugImplementation 'junit:junit:4.13.2'
    debugImplementation 'androidx.test.ext:junit-ktx:1.1.3'
    debugImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    debugImplementation "com.google.dagger:hilt-android-testing:$hilt_version"

    testImplementation 'org.robolectric:robolectric:4.8'
    // Hilt libraries
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"
    kaptTest "com.google.dagger:hilt-android-compiler:$hilt_version"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt_version"
}
